{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,+BCL9D,MAAM,EAA+BC,OAAOC,KAAKC,OAAO,iBCAlD,EAA+BF,OAAOC,KAAKC,OAAO,a,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,2B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,kC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,qC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,gB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,iC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCUxDC,IAAAA,aAAAA,IACE,iBACA,WACEC,IAAAA,UAAAA,cAAqCC,IAAAA,UAAgB,kBAGrDC,EAAAA,EAAAA,QAAOC,IAAAA,UAAwB,eAAe,SAAUC,GACtD,GAAKC,KAAKC,MAAMC,KAAhB,CAEA,IAAMC,EAAQT,IAAAA,WAAAA,MAAqB,kEAC7BU,EAAcV,IAAAA,WAAAA,MAAqB,wEAEzCK,EAAMM,IACJ,OACA,EAAC,IAAD,CAAOC,aAAa,EAAOH,MAAOA,EAAOI,KAAK,WAC3CH,IAEF,GAVyB,CAY7B,KAEDP,EAAAA,EAAAA,QAAOW,IAAoB,eAAe,WACxC,IAAMC,EAAOf,IAAAA,QAAAA,KAEb,GAAKe,EAAL,CAEA,IAAMC,EAAShB,IAAAA,QAAAA,IAAgB,UAE/B,IAAIgB,EAAOC,WAAWC,gBAAtB,CAEA,IAAMC,EAAqBH,EAAOG,QAC/BC,QAAO,SAACC,GACP,MAA8B,YAAvBA,EAAKC,eAA+BD,EAAKN,OAAOQ,OAASR,EAAKQ,IACtE,IAEH,GAAKJ,EAAMK,OAAX,CAGA,IAAMH,EAAOF,EAAMA,EAAMK,OAAS,GAElC,MAAIH,GAAAA,EAAMI,WACRzB,IAAAA,SAAAA,KAAkB0B,IAAkB,CAAEL,KAAAA,EAAMb,MAAM,IAClDR,IAAAA,SAAAA,SAIAA,IAAAA,OAAAA,KAAgB2B,IAAO,CAAEd,KAAM,SAAWb,IAAAA,WAAAA,MAAqB,8DAC/DA,IAAAA,SAAAA,QAZuB,CAPoB,CAJ5B,CAyBlB,GACF,IACA,G","sources":["webpack://@the-turk/flarum-nodp/webpack/bootstrap","webpack://@the-turk/flarum-nodp/webpack/runtime/compat get default export","webpack://@the-turk/flarum-nodp/webpack/runtime/define property getters","webpack://@the-turk/flarum-nodp/webpack/runtime/hasOwnProperty shorthand","webpack://@the-turk/flarum-nodp/webpack/runtime/make namespace object","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['common/extend']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['forum/app']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['common/components/Alert']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['forum/components/EditPostComposer']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['common/Model']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['forum/components/ComposerBody']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@the-turk/flarum-nodp/./src/forum/index.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Alert'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/EditPostComposer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/ComposerBody'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","import { extend } from 'flarum/common/extend';\r\nimport app from 'flarum/forum/app';\r\nimport Alert from 'flarum/common/components/Alert';\r\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\r\nimport EditPostComposer from 'flarum/forum/components/EditPostComposer';\r\nimport Model from 'flarum/common/Model';\r\nimport Post from 'flarum/common/models/Post';\r\nimport ComposerBody from 'flarum/forum/components/ComposerBody';\r\nimport Discussion from 'flarum/common/models/Discussion';\r\n\r\napp.initializers.add(\r\n  'the-turk-nodp',\r\n  () => {\r\n    Discussion.prototype.canDoublePost = Model.attribute('canDoublePost');\r\n\r\n    // Add a warning message.\r\n    extend(ComposerBody.prototype, 'headerItems', function (items) {\r\n      if (!this.attrs.nodp) return;\r\n\r\n      const title = app.translator.trans('the-turk-nodp.forum.composer_edit.double_posting_warning_title');\r\n      const description = app.translator.trans('the-turk-nodp.forum.composer_edit.double_posting_warning_description');\r\n\r\n      items.add(\r\n        'nodp',\r\n        <Alert dismissible={false} title={title} type=\"warning\">\r\n          {description}\r\n        </Alert>,\r\n        -10\r\n      );\r\n    });\r\n\r\n    extend(DiscussionControls, 'replyAction', function () {\r\n      const user = app.session.user;\r\n\r\n      if (!user) return;\r\n\r\n      const stream = app.current.get('stream');\r\n\r\n      if (stream.discussion.canDoublePost()) return;\r\n\r\n      const posts: Array<Post> = stream.posts()\r\n        .filter((post: Post) => {\r\n          return post.contentType() === \"comment\" && post.user().id() === user.id()\r\n        });\r\n\r\n      if (!posts.length) return;\r\n\r\n      // last post\r\n      const post = posts[posts.length - 1];\r\n\r\n      if (post?.canEdit()) {\r\n        app.composer.load(EditPostComposer, { post, nodp: true });\r\n        app.composer.show();\r\n      } else {\r\n        // user can't edit their post\r\n        // and not allowed to double post.\r\n        app.alerts.show(Alert, { type: 'error' }, app.translator.trans('the-turk-nodp.forum.discussion.cannot_reply_alert_message'));\r\n        app.composer.close();\r\n      }\r\n    });\r\n  },\r\n  -10\r\n);\r\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","app","Discussion","Model","extend","ComposerBody","items","this","attrs","nodp","title","description","add","dismissible","type","DiscussionControls","user","stream","discussion","canDoublePost","posts","filter","post","contentType","id","length","canEdit","EditPostComposer","Alert"],"sourceRoot":""}