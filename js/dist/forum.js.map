{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,+BCL9D,MAAM,EAA+BC,OAAOC,KAAKC,OAAO,iBCAlD,EAA+BF,OAAOC,KAAKC,OAAO,a,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,2B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,kC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,qC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,gB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,sB,aCSxDC,IAAAA,aAAAA,IACE,iBACA,WACEC,IAAAA,UAAAA,cAA+BC,IAAAA,UAAgB,kBAe/CC,EAAAA,EAAAA,QAAOC,IAAAA,UAA4B,eAAe,SAAUC,GAC1D,GAAKC,KAAKC,MAAMC,KAAhB,CAEA,IAAMC,EAAQT,IAAAA,WAAAA,MAAqB,kEAC7BU,EAAcV,IAAAA,WAAAA,MAAqB,wEAEzCK,EAAMM,IACJ,OACA,EAAC,IAAD,CAAOC,aAAa,EAAOH,MAAOA,EAAOI,KAAK,WAC3CH,GARuB,CAW7B,KAGDI,EAAAA,EAAAA,UAASC,IAAoB,eAAe,SAAUC,EAAUC,EAAUC,GACxE,IAAMC,EAAOnB,IAAAA,QAAAA,KAEb,OAAKmB,EAEE,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAqBvB,IAAAA,QAAAA,IAAgB,UAAUuB,QAC/CC,EAAOD,EAAMA,EAAME,OAAS,GAElC,OArCoB,SAACD,EAAYL,GACnC,GAAIA,EAAKO,gBAAiB,OAAO,EAEjC,IAAMC,EAAWH,EAAKL,OAChBS,EAAgBJ,EAAKK,YAErBC,EAAoB9B,IAAAA,MAAAA,UAAoB,mBACxC+B,EAAqBC,MAAMJ,GAAejB,IAAImB,EAAW,UAAUG,SAASD,SAElF,OAAOL,IAAaR,IAASY,CAC9B,CA2BQG,CAAgBV,EAAML,GAEvBK,GAA+B,YAAvBA,EAAKW,eAA+BX,EAAKY,WACnDpC,IAAAA,SAAAA,KAAkBI,IAAkB,CAAEoB,KAAAA,EAAMhB,MAAM,IAClDR,IAAAA,SAAAA,OAEOqB,EAAQrB,IAAAA,YAKjBA,IAAAA,OAAAA,KAAgBqC,IAAO,CAAExB,KAAM,SAAWb,IAAAA,WAAAA,MAAqB,8DAExDsB,KAbkCN,EAASC,EAAUC,EAc7D,IApBiBF,EAASC,EAAUC,EAqBtC,GACF,IACA,G","sources":["webpack://@the-turk/flarum-nodp/webpack/bootstrap","webpack://@the-turk/flarum-nodp/webpack/runtime/compat get default export","webpack://@the-turk/flarum-nodp/webpack/runtime/define property getters","webpack://@the-turk/flarum-nodp/webpack/runtime/hasOwnProperty shorthand","webpack://@the-turk/flarum-nodp/webpack/runtime/make namespace object","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['common/extend']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['forum/app']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['common/components/Alert']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['forum/components/EditPostComposer']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['common/Model']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['common/models/User']\"","webpack://@the-turk/flarum-nodp/./src/forum/index.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Alert'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/EditPostComposer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/User'];","import { extend, override } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport Alert from 'flarum/common/components/Alert';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport EditPostComposer from 'flarum/forum/components/EditPostComposer';\nimport Model from 'flarum/common/Model';\nimport User from 'flarum/common/models/User';\nimport Post from 'flarum/common/models/Post';\n\napp.initializers.add(\n  'the-turk-nodp',\n  () => {\n    User.prototype.canDoublePost = Model.attribute('canDoublePost');\n\n    const isDoublePosting = (post: Post, user: User) => {\n      if (user.canDoublePost()) return false;\n\n      const postUser = post.user();\n      const postCreatedAt = post.createdAt();\n\n      const timeLimit: number = app.forum.attribute('nodp.time_limit'); // in minutes\n      const isExpired: boolean = dayjs(postCreatedAt).add(timeLimit, 'minute').isBefore(dayjs());\n\n      return postUser === user && !isExpired;\n    };\n\n    // Add a warning message.\n    extend(EditPostComposer.prototype, 'headerItems', function (items) {\n      if (!this.attrs.nodp) return;\n\n      const title = app.translator.trans('the-turk-nodp.forum.composer_edit.double_posting_warning_title');\n      const description = app.translator.trans('the-turk-nodp.forum.composer_edit.double_posting_warning_description');\n\n      items.add(\n        'nodp',\n        <Alert dismissible={false} title={title} type=\"warning\">\n          {description}\n        </Alert>\n      );\n    });\n\n    // We need to override replyAction directly to support `flarum/mentions`.\n    override(DiscussionControls, 'replyAction', function (original, goToLast, forceRefresh) {\n      const user = app.session.user;\n\n      if (!user) return original(goToLast, forceRefresh);\n\n      return new Promise((resolve, reject) => {\n        const posts: Array<Post> = app.current.get('stream').posts();\n        const post = posts[posts.length - 1];\n\n        if (!isDoublePosting(post, user)) return original(goToLast, forceRefresh);\n\n        if (post && post.contentType() === 'comment' && post.canEdit()) {\n          app.composer.load(EditPostComposer, { post, nodp: true });\n          app.composer.show();\n\n          return resolve(app.composer);\n        }\n\n        // user can't edit their post\n        // and not allowed to double post.\n        app.alerts.show(Alert, { type: 'error' }, app.translator.trans('the-turk-nodp.forum.discussion.cannot_reply_alert_message'));\n\n        return reject();\n      });\n    });\n  },\n  -10\n);\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","app","User","Model","extend","EditPostComposer","items","this","attrs","nodp","title","description","add","dismissible","type","override","DiscussionControls","original","goToLast","forceRefresh","user","Promise","resolve","reject","posts","post","length","canDoublePost","postUser","postCreatedAt","createdAt","timeLimit","isExpired","dayjs","isBefore","isDoublePosting","contentType","canEdit","Alert"],"sourceRoot":""}