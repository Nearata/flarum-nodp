{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@the-turk/flarum-nodp/webpack/bootstrap","webpack://@the-turk/flarum-nodp/webpack/runtime/compat get default export","webpack://@the-turk/flarum-nodp/webpack/runtime/define property getters","webpack://@the-turk/flarum-nodp/webpack/runtime/hasOwnProperty shorthand","webpack://@the-turk/flarum-nodp/webpack/runtime/make namespace object","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['common/extend']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['forum/app']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['common/components/Alert']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['forum/components/EditPostComposer']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['forum/components/LogInModal']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['common/Model']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['forum/components/ReplyComposer']\"","webpack://@the-turk/flarum-nodp/external root \"flarum.core.compat['common/models/User']\"","webpack://@the-turk/flarum-nodp/./src/forum/index.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Alert'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/EditPostComposer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/LogInModal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/ReplyComposer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/User'];","import { extend, override } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport Alert from 'flarum/common/components/Alert';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport EditPostComposer from 'flarum/forum/components/EditPostComposer';\nimport LogInModal from 'flarum/forum/components/LogInModal';\nimport Model from 'flarum/common/Model';\nimport ReplyComposer from 'flarum/forum/components/ReplyComposer';\nimport User from 'flarum/common/models/User';\nimport Discussion from 'flarum/common/models/Discussion';\n\napp.initializers.add(\n  'the-turk-nodp',\n  () => {\n    User.prototype.canDoublePost = Model.attribute('canDoublePost');\n\n    const isDoublePosting = (discussion: Discussion, user: User) => {\n      if (!discussion || !user || user.canDoublePost()) return false;\n\n      const lastPostedUser = discussion.lastPostedUser();\n      const lastPostedAt = discussion.lastPostedAt();\n\n      const timeLimit = app.forum.attribute('nodp.time_limit'); // in minutes\n      const isExpired = dayjs(lastPostedAt.getTime()).add(timeLimit, 'minute').isBefore(dayjs());\n\n      return timeLimit == 0 || (!isExpired && lastPostedUser == user) ? true : false;\n    };\n\n    // Add a warning message.\n    extend(EditPostComposer.prototype, 'headerItems', function (items) {\n      items.add(\n        'nodp',\n        <div className=\"Alert\">\n          <div className=\"Alert-body\">\n            <h4>{app.translator.trans('the-turk-nodp.forum.composer_edit.double_posting_warning_title')}</h4>\n            <p>{app.translator.trans('the-turk-nodp.forum.composer_edit.double_posting_warning_description')}</p>\n          </div>\n        </div>\n      );\n    });\n\n    // We need to override replyAction directly to support `flarum/mentions`.\n    override(DiscussionControls, 'replyAction', function (goToLast, forceRefresh) {\n      const user = app.session.user;\n\n      return new Promise((resolve, reject) => {\n        if (user) {\n          if (isDoublePosting(this, user)) {\n            const post = this.lastPost();\n\n            if (post.contentType() === 'comment' && post.canEdit()) {\n              app.composer.load(EditPostComposer, { post });\n              app.composer.show();\n\n              // showing the composer message like this because what will happen\n              // if you're just editing a post instead of attempting double posting?\n              $('body').find('.item-nodp').css('display', 'block');\n\n              return resolve(app.composer);\n            }\n\n            // user can't edit their post\n            // and not allowed to double post.\n            app.alerts.show(Alert, { type: 'error' }, app.translator.trans('the-turk-nodp.forum.discussion.cannot_reply_alert_message'));\n\n            return reject();\n          }\n\n          if (this.canReply()) {\n            if (!app.composer.composingReplyTo(this) || forceRefresh) {\n              app.composer.load(ReplyComposer, {\n                user,\n                discussion: this,\n              });\n            }\n            app.composer.show();\n\n            if (goToLast && app.viewingDiscussion(this) && !app.composer.isFullScreen()) {\n              app.current.get('stream').goToNumber('reply');\n            }\n\n            return resolve(app.composer);\n          } else {\n            return reject();\n          }\n        }\n\n        app.modal.show(LogInModal);\n\n        return reject();\n      });\n    });\n  },\n  -10\n);\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","app","User","Model","extend","EditPostComposer","items","add","className","override","DiscussionControls","goToLast","forceRefresh","user","Promise","resolve","reject","discussion","canDoublePost","lastPostedUser","lastPostedAt","timeLimit","isExpired","dayjs","getTime","isBefore","isDoublePosting","post","lastPost","contentType","canEdit","$","find","css","Alert","type","canReply","ReplyComposer","goToNumber","LogInModal"],"sourceRoot":""}